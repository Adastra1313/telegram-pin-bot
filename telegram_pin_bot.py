import os
import json
import datetime
from flask import Flask
from dotenv import load_dotenv
from telegram import Bot, ReplyKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# 1) –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()
TOKEN             = os.getenv("TELEGRAM_TOKEN")
SMM_CHAT_IDS      = [int(x) for x in os.getenv("SMM_CHAT_IDS","").split(",") if x.strip()]
STORAGE_CHAT_ID   = int(os.getenv("STORAGE_CHAT_ID","0"))
PINNED_MESSAGE_ID = int(os.getenv("PINNED_MESSAGE_ID","0"))

if not all([TOKEN, SMM_CHAT_IDS, STORAGE_CHAT_ID, PINNED_MESSAGE_ID]):
    raise RuntimeError("–í–∫–∞–∂—ñ—Ç—å —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ: TELEGRAM_TOKEN, SMM_CHAT_IDS, STORAGE_CHAT_ID, PINNED_MESSAGE_ID")

bot = Bot(token=TOKEN)
updater = Updater(bot=bot, use_context=True)
dp = updater.dispatcher

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ user_id
user_state: dict[int,str] = {}

def load_db() -> dict:
    msg = bot.get_chat(STORAGE_CHAT_ID).pinned_message
    try:
        return json.loads(msg.text or "{}")
    except:
        return {}

def save_db(db: dict):
    text = json.dumps(db, ensure_ascii=False, indent=2)
    bot.edit_message_text(
        chat_id=STORAGE_CHAT_ID,
        message_id=PINNED_MESSAGE_ID,
        text=text
    )

def start(update: Update, ctx: CallbackContext):
    kb = ReplyKeyboardMarkup(
        [["–ö–æ–Ω—Ç–µ–Ω—Ç –∑ –≤–µ—Å—ñ–ª–ª—è, –≥–µ–Ω–¥–µ—Ä–ø–∞—Ç—ñ—è, –æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è"],
         ["–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∏, –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó"]],
        resize_keyboard=True
    )
    update.message.reply_text(
        "–©–æ –∑–∞ –∫–æ—Ç–∏–∫ –∑–∞–≤—ñ—Ç–∞–≤? –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–∑–Ω—ñ–º–∞–≤?",
        reply_markup=kb
    )

def choose_category(update: Update, ctx: CallbackContext):
    text = update.message.text
    user_state[update.effective_user.id] = text
    update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ—Å.")

def receive_link(update: Update, ctx: CallbackContext):
    link = update.message.text
    uid = str(update.effective_user.id)
    db = load_db()
    entry = db.get(uid, {"name": update.effective_user.full_name, "count":0, "subs":[]})
    entry["count"] += 1
    entry["subs"].append({
        "category": user_state.get(update.effective_user.id,""),
        "link":     link,
        "time":     datetime.datetime.utcnow().isoformat()
    })
    db[uid] = entry
    save_db(db)

    update.message.reply_text(f"–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ! –¢–≤—ñ–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ —á–µ–º–ø—ñ–æ–Ω–∞: {entry['count']}")

    alert = (
        f"üÜï –ù–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥ {entry['name']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {user_state.get(update.effective_user.id)}\n"
        f"–õ—ñ–Ω–∫: {link}"
    )
    for cid in SMM_CHAT_IDS:
        bot.send_message(chat_id=cid, text=alert)

# –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
dp.add_handler(CommandHandler("start", start))
dp.add_handler(MessageHandler(Filters.regex(r"^(–ö–æ–Ω—Ç–µ–Ω—Ç –∑ –≤–µ—Å—ñ–ª–ª—è, –≥–µ–Ω–¥–µ—Ä–ø–∞—Ç—ñ—è, –æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è|–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∏, –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó)$"), choose_category))
dp.add_handler(MessageHandler(Filters.regex(r"^http"), receive_link))

# --- Keep-alive —á–µ—Ä–µ–∑ Flask ---
app = Flask(__name__)
@app.route("/")
def home():
    return "Bot is running"
def run_web():
    app.run(host="0.0.0.0", port=3000)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ, —â–æ–± –±–æ—Ç –Ω–µ —Å–ø–∞–≤
    import threading
    threading.Thread(target=run_web).start()
    # –Ü –∑–∞–ø—É—Å–∫–∞—î–º–æ Telegram-–ø–æ–ª—ñ–Ω–≥
    updater.start_polling(drop_pending_updates=True)
    updater.idle()
