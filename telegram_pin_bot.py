import os, json, datetime, threading
from aiogram import Bot, Dispatcher, types
from flask import Flask
from dotenv import load_dotenv

# 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()

# 2. –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN            = os.getenv("TELEGRAM_TOKEN")
SMM_CHAT_IDS     = [int(x) for x in os.getenv("SMM_CHAT_IDS","").split(",") if x.strip()]
STORAGE_CHAT_ID  = int(os.getenv("STORAGE_CHAT_ID","0"))
PINNED_MESSAGE_ID= int(os.getenv("PINNED_MESSAGE_ID","0"))

if not all([TOKEN, SMM_CHAT_IDS, STORAGE_CHAT_ID, PINNED_MESSAGE_ID]):
    raise RuntimeError("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ: TELEGRAM_TOKEN, SMM_CHAT_IDS, STORAGE_CHAT_ID, PINNED_MESSAGE_ID")

bot = Bot(token=TOKEN)
dp  = Dispatcher(bot)
user_state = {}

async def load_db():
    chat   = await bot.get_chat(STORAGE_CHAT_ID)
    pinned = chat.pinned_message
    try:
        return json.loads(pinned.text or "{}")
    except:
        return {}

async def save_db(data):
    text = json.dumps(data, ensure_ascii=False, indent=2)
    await bot.edit_message_text(
        chat_id=STORAGE_CHAT_ID,
        message_id=PINNED_MESSAGE_ID,
        text=text
    )

@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
      "–ö–æ–Ω—Ç–µ–Ω—Ç –∑ –≤–µ—Å—ñ–ª–ª—è, –≥–µ–Ω–¥–µ—Ä–ø–∞—Ç—ñ—è, –æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è",
      "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∏, –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó"
    )
    await msg.answer("–©–æ –∑–∞ –∫–æ—Ç–∏–∫ –∑–∞–≤—ñ—Ç–∞–≤? –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–∑–Ω—ñ–º–∞–≤?", reply_markup=kb)

@dp.message_handler(lambda m: m.text in [
    "–ö–æ–Ω—Ç–µ–Ω—Ç –∑ –≤–µ—Å—ñ–ª–ª—è, –≥–µ–Ω–¥–µ—Ä–ø–∞—Ç—ñ—è, –æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è",
    "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∏, –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó"
])
async def choose_cat(msg: types.Message):
    user_state[msg.from_user.id] = msg.text
    await msg.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ—Å.")

@dp.message_handler(lambda m: m.text and m.text.startswith("http"))
async def receive_link(msg: types.Message):
    db  = await load_db()
    uid = str(msg.from_user.id)
    ent = db.get(uid, {"name":msg.from_user.full_name,"count":0,"subs":[]})
    ent["count"] += 1
    ent["subs"].append({
      "category": user_state.get(msg.from_user.id,""),
      "link":     msg.text,
      "time":     datetime.datetime.utcnow().isoformat()
    })
    db[uid] = ent
    await save_db(db)

    await msg.answer(f"–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ! –¢–≤—ñ–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ —á–µ–º–ø—ñ–æ–Ω–∞: {ent['count']}")
    alert = (
      f"üÜï –ù–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥ {ent['name']}\n"
      f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {user_state.get(msg.from_user.id)}\n"
      f"–õ—ñ–Ω–∫: {msg.text}"
    )
    for cid in SMM_CHAT_IDS:
        await bot.send_message(chat_id=cid, text=alert)

# ‚Äî keep-alive —á–µ—Ä–µ–∑ Flask ‚Äî
app = Flask(__name__)
@app.route('/')
def home(): return "Bot is running"
def run_app(): app.run(host='0.0.0.0', port=3000)
threading.Thread(target=run_app).start()

if __name__=="__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
