import os, json, datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor  # v3.0.0b7 –º–∞—î —Ü–µ–π –º–æ–¥—É–ª—å

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()

TOKEN           = os.getenv("TELEGRAM_TOKEN")
SMM_CHAT_IDS    = [int(x) for x in os.getenv("SMM_CHAT_IDS","").split(",") if x]
STORAGE_CHAT_ID = int(os.getenv("STORAGE_CHAT_ID","0"))
DB_FILE         = "data.json"

bot = Bot(token=TOKEN)
dp  = Dispatcher(bot)

def load_db():
    if os.path.exists(DB_FILE):
        return json.load(open(DB_FILE, encoding="utf-8"))
    return {}

def save_db(db):
    json.dump(db, open(DB_FILE,"w",encoding="utf-8"),
              ensure_ascii=False, indent=2)

@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–í–µ—Å—ñ–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç","–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    await m.answer("–©–æ –∑–∞ –∫–æ—Ç–∏–∫ –∑–∞–≤—ñ—Ç–∞–≤? –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–∑–Ω—ñ–º–∞–≤?", reply_markup=kb)

@dp.message_handler(commands=["stats"])
async def cmd_stats(m: types.Message):
    db = load_db()
    uid = str(m.from_user.id)
    if uid in db:
        e = db[uid]
        text = f"üìä {e['name']}, –≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ {e['count']} –ª—ñ–Ω–∫—ñ–≤\n\nüèÜ –¢–æ–ø-5:\n"
        top = sorted(db.values(), key=lambda x: x["count"], reverse=True)[:5]
        for i,u in enumerate(top,1):
            text += f"{i}. {u['name']} ‚Äì {u['count']}\n"
    else:
        text = "–í–∏ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏."
    await m.answer(text)

@dp.message_handler(lambda m: m.text in ["–í–µ—Å—ñ–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç","–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"])
async def choose(m: types.Message):
    dp.storage.data[m.from_user.id] = {"cat": m.text}
    await m.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ª—ñ–Ω–∫ (http‚Ä¶)")

@dp.message_handler(lambda m: m.text and m.text.startswith("http"))
async def receive(m: types.Message):
    db = load_db()
    uid = str(m.from_user.id)
    entry = db.get(uid, {"name":m.from_user.full_name,"count":0})
    entry["count"] += 1
    db[uid] = entry
    save_db(db)

    # –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ –∫–∞–Ω–∞–ª
    await bot.send_message(
        STORAGE_CHAT_ID,
        f"#{entry['count']} | {entry['name']} | {m.text}"
    )
    await m.answer("–î—É–∂–µ –∫—Ä—É—Ç–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, —è —Ç–µ–±–µ –æ–±–æ–∂–Ω—é—é! –ß–µ–∫–∞—é –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ.")
    note = f"üÜï {entry['name']} (#{entry['count']})\n{m.text}"
    for cid in SMM_CHAT_IDS:
        await bot.send_message(cid, note)

if __name__=="__main__":
    executor.start_polling(dp, skip_updates=True)
