import os
import json
import datetime
from threading import Thread

from flask import Flask
from dotenv import load_dotenv

from telegram import Bot, ReplyKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# 1) –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env
load_dotenv()
TOKEN             = os.getenv("TELEGRAM_TOKEN")
SMM_CHAT_IDS      = [int(x) for x in os.getenv("SMM_CHAT_IDS", "").split(",") if x.strip()]
STORAGE_CHAT_ID   = int(os.getenv("STORAGE_CHAT_ID", "0"))
PINNED_MESSAGE_ID = int(os.getenv("PINNED_MESSAGE_ID", "0"))

if not all([TOKEN, SMM_CHAT_IDS, STORAGE_CHAT_ID, PINNED_MESSAGE_ID]):
    raise RuntimeError(
        "–í–∫–∞–∂—ñ—Ç—å —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ: TELEGRAM_TOKEN, SMM_CHAT_IDS, "
        "STORAGE_CHAT_ID, PINNED_MESSAGE_ID"
    )

# 2) Flask-keepalive (—â–æ–± Render –Ω–µ —Å–ø–∞–≤ –±–æ—Ç)
app = Flask(__name__)
@app.route("/")
def home():
    return "‚úÖ Bot is running"

def start_flask():
    # –≤–∏–∫–ª—é—á–∞—î–º–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á, —â–æ–± –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥–≤–∞ –ø—Ä–æ—Ü–µ—Å–∏
    app.run(host="0.0.0.0", port=3000, use_reloader=False)

# 3) –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
user_state: dict[int, str] = {}

# 4) –û–±—Ä–æ–±–Ω–∏–∫–∏ Telegram-–ø–æ–¥—ñ–π
async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = ReplyKeyboardMarkup(
        [["–ö–æ–Ω—Ç–µ–Ω—Ç –∑ –≤–µ—Å—ñ–ª–ª—è, –≥–µ–Ω–¥–µ—Ä–ø–∞—Ç—ñ—è, –æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è"],
         ["–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∏, –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó"]],
        resize_keyboard=True
    )
    await update.message.reply_text(
        "–©–æ –∑–∞ –∫–æ—Ç–∏–∫ –∑–∞–≤—ñ—Ç–∞–≤? –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–∑–Ω—ñ–º–∞–≤?",
        reply_markup=kb
    )

async def choose_category(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = update.message.text
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ—Å.")

async def receive_link(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    link    = update.message.text
    category = user_state.get(user_id, "")

    bot = Bot(token=TOKEN)
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π JSON –∑ –∑–∞–ø—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    chat   = await bot.get_chat(STORAGE_CHAT_ID)
    pinned = chat.pinned_message
    try:
        db = json.loads(pinned.text or "{}")
    except:
        db = {}

    entry = db.get(str(user_id), {
        "name": update.effective_user.full_name,
        "count": 0,
        "subs": []
    })
    entry["count"] += 1
    entry["subs"].append({
        "category": category,
        "link":     link,
        "time":     datetime.datetime.utcnow().isoformat()
    })
    db[str(user_id)] = entry

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π JSON –Ω–∞–∑–∞–¥ —É –∑–∞–ø—ñ–Ω-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = json.dumps(db, ensure_ascii=False, indent=2)
    await bot.edit_message_text(
        chat_id=STORAGE_CHAT_ID,
        message_id=PINNED_MESSAGE_ID,
        text=text
    )

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await update.message.reply_text(
        f"–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ! –¢–≤—ñ–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ —á–µ–º–ø—ñ–æ–Ω–∞: {entry['count']}"
    )

    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ SMM-—á–∞—Ç–∞—Ö
    alert = (
        f"üÜï –ù–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥ {entry['name']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
        f"–õ—ñ–Ω–∫: {link}"
    )
    for cid in SMM_CHAT_IDS:
        await bot.send_message(chat_id=cid, text=alert)

# 5) –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç
if __name__ == "__main__":
    # 5.1) –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    Thread(target=start_flask, daemon=True).start()

    # 5.2) –ë—É–¥—É—î–º–æ Telegram-–¥–æ–¥–∞—Ç–æ–∫ —Ç–∞ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    application = (
        ApplicationBuilder()
        .token(TOKEN)
        .build()
    )
    application.add_handler(CommandHandler("start", start_cmd))
    application.add_handler(
        MessageHandler(
            filters.Regex(
                r"^(–ö–æ–Ω—Ç–µ–Ω—Ç –∑ –≤–µ—Å—ñ–ª–ª—è, –≥–µ–Ω–¥–µ—Ä–ø–∞—Ç—ñ—è, –æ—Å–≤—ñ–¥—á–µ–Ω–Ω—è|–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–∏, –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó)$"
            ),
            choose_category
        )
    )
    application.add_handler(
        MessageHandler(filters.Regex(r"^https?://"), receive_link)
    )

    # 5.3) –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
    application.run_polling(drop_pending_updates=True)
