import os
import json
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types

# 1) –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env
load_dotenv()
TOKEN           = os.getenv("TELEGRAM_TOKEN")
SMM_CHAT_IDS    = [int(x) for x in os.getenv("SMM_CHAT_IDS", "").split(",") if x]
STORAGE_CHAT_ID = int(os.getenv("STORAGE_CHAT_ID", "0"))
DB_FILE         = "data.json"

if not all([TOKEN, SMM_CHAT_IDS, STORAGE_CHAT_ID]):
    raise RuntimeError("–í–∫–∞–∂—ñ—Ç—å —É .env: TELEGRAM_TOKEN, SMM_CHAT_IDS, STORAGE_CHAT_ID")

# 2) –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp  = Dispatcher()

# 3) –õ–æ–∫–∞–ª—å–Ω–∞ –ë–î
def load_db() -> dict:
    if os.path.exists(DB_FILE):
        return json.load(open(DB_FILE, encoding="utf-8"))
    return {}

def save_db(db: dict):
    json.dump(db, open(DB_FILE, "w", encoding="utf-8"),
              ensure_ascii=False, indent=2)

# 4) –•–µ–Ω–¥–ª–µ—Ä–∏
async def cmd_start(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–í–µ—Å—ñ–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
    await message.answer(
        "–©–æ –∑–∞ –∫–æ—Ç–∏–∫ –∑–∞–≤—ñ—Ç–∞–≤? –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–∑–Ω—ñ–º–∞–≤?",
        reply_markup=kb
    )

async def cmd_stats(message: types.Message):
    db = load_db()
    uid = str(message.from_user.id)
    if uid in db:
        e = db[uid]
        text = (
            f"üìä {e['name']}, –≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ {e['count']} –ª—ñ–Ω–∫—ñ–≤\n\n"
            "üèÜ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω–∏—Ö:\n"
        )
        top = sorted(db.values(), key=lambda x: x["count"], reverse=True)[:5]
        for i, u in enumerate(top, 1):
            text += f"{i}. {u['name']} ‚Äì {u['count']}\n"
    else:
        text = "–í–∏ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏."
    await message.answer(text)

async def choose_category(message: types.Message):
    dp.storage.data[message.from_user.id] = {"cat": message.text}
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ª—ñ–Ω–∫, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ http‚Ä¶")

async def receive_link(message: types.Message):
    db = load_db()
    uid = str(message.from_user.id)
    entry = db.get(uid, {"name": message.from_user.full_name, "count": 0})
    entry["count"] += 1
    db[uid] = entry
    save_db(db)

    # 1) –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ Storage-–∫–∞–Ω–∞–ª
    await bot.send_message(
        chat_id=STORAGE_CHAT_ID,
        text=f"#{entry['count']} | {entry['name']} | {message.text}"
    )
    # 2) –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await message.answer("–î—É–∂–µ –∫—Ä—É—Ç–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, —è —Ç–µ–±–µ –æ–±–æ–∂–Ω—é—é! –ß–µ–∫–∞—é –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ.")
    # 3) –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è SMM
    note = f"üÜï –ù–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥ {entry['name']} (#{entry['count']})\n{message.text}"
    for cid in SMM_CHAT_IDS:
        await bot.send_message(cid, note)

# 5) –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —á–µ—Ä–µ–∑ –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü—ñ—ó
dp.message.register(cmd_start,       lambda m: m.text == "/start")
dp.message.register(cmd_stats,       lambda m: m.text == "/stats")
dp.message.register(choose_category, lambda m: m.text in ["–í–µ—Å—ñ–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"])
dp.message.register(receive_link,    lambda m: m.text and m.text.startswith("http"))

# 6) –°—Ç–∞—Ä—Ç polling
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot, skip_updates=True))
